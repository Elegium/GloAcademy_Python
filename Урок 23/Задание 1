import pygame
import random
import time


class Ball:
    def __init__(self, display):
        self.display = display
        self.color = pygame.Color('red')
        self.center_x = 100
        self.center_y = 100
        self.radius = 10

        self.vx = 2
        self.vy = 2

    def show(self):
        pygame.draw.circle(self.display, self.color, (self.center_x, self.center_y),
                           self.radius)

    def go(self):
        self.center_x += self.vx
        self.center_y += self.vy

    def clear(self):
        pygame.draw.circle(self.display, pygame.Color('white'), (self.center_x, self.center_y),
                           self.radius)

    def move(self):
        self.clear()
        self.go()
        self.show()

    def stop(self):
        self.vx = 0
        self.vy = 0

    def count(self, count_ball):
        if self.center_x <= self.radius or self.center_x >= width - self.radius:
            count_ball += 1
        if self.center_y <= self.radius or self.center_y >= height - self.radius:
            count_ball += 1
        return count_ball

    def print_count(self, text):

        self.font = pygame.font.Font(None, 40)
        self.text2 = self.font.render(str(count_ball), True, "red")
        self.text_rect = self.text2.get_rect()
        self.text_rect.midtop = (80, 30)
        self.display.blit(self.text2, self.text_rect)


class RandomPointBall(Ball):
    def __init__(self, display):
        super().__init__(
            display)
        self.color = pygame.Color('blue')
        width, height = display.get_size()
        self.center_x = random.randint(self.radius, width - self.radius)
        self.center_y = random.randint(self.radius, height - self.radius)


class PointBall(Ball):
    def __init__(self, display, x, y):
        super().__init__(display)
        self.color = pygame.Color('yellow')
        self.center_x = x
        self.center_y = y


class RandomPointMovableBall(RandomPointBall):
    def __init__(self, display):
        super().__init__(display)
        self.color = pygame.Color('green')
        while True:
            self.vx = random.randint(-3, 3)
            if self.vx == 0:
                self.vx = random.randint(-3, 3)
            else:
                break
        while True:
            self.vy = random.randint(-3, 3)
            if self.vy == 0:
                self.vy = random.randint(-3, 3)
            else:
                break


class BillyardBall(RandomPointMovableBall):
    def __init__(self, display):
        super().__init__(display)
        # Полиморфизм здесь мы изменили поведение метода го

    def go(self):
        super().go()  # Наследуем старый метод го. И добавим в него новые действия
        width, height = self.display.get_size()
        if self.center_x <= self.radius or self.center_x >= width - self.radius:
            self.vx = - self.vx
        if self.center_y <= self.radius or self.center_y >= height - self.radius:
            self.vy = - self.vy


pygame.init()

width = 700
height = 400

display = pygame.display.set_mode((width, height))

display.fill(pygame.Color('white'))

randomPointBall = RandomPointBall(display)

balls = []
for i in range(2):
    billyardBall = BillyardBall(display)
    billyardBall.show()
    balls.append(billyardBall)

pygame.display.flip()

time.sleep(0.3)

pygame.display.flip()

clock = pygame.time.Clock()
count_ball = 0
while True:
    event_list = pygame.event.get()
    for event in event_list:
        if event.type == pygame.QUIT:
            pygame.quit()
    for ball in balls:
        ball.move()
        count_ball = ball.count(count_ball)
        ball.print_count(count_ball)

    pygame.display.update()
    pygame.display.flip()
    clock.tick(80)
